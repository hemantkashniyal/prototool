// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package grpcpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Foo struct {
	Bar                  string   `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Foo) Reset()         { *m = Foo{} }
func (m *Foo) String() string { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()    {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *Foo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Foo.Unmarshal(m, b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
}
func (m *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(m, src)
}
func (m *Foo) XXX_Size() int {
	return xxx_messageInfo_Foo.Size(m)
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

func (m *Foo) GetBar() string {
	if m != nil {
		return m.Bar
	}
	return ""
}

type ExclamationRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExclamationRequest) Reset()         { *m = ExclamationRequest{} }
func (m *ExclamationRequest) String() string { return proto.CompactTextString(m) }
func (*ExclamationRequest) ProtoMessage()    {}
func (*ExclamationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *ExclamationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExclamationRequest.Unmarshal(m, b)
}
func (m *ExclamationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExclamationRequest.Marshal(b, m, deterministic)
}
func (m *ExclamationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExclamationRequest.Merge(m, src)
}
func (m *ExclamationRequest) XXX_Size() int {
	return xxx_messageInfo_ExclamationRequest.Size(m)
}
func (m *ExclamationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExclamationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExclamationRequest proto.InternalMessageInfo

func (m *ExclamationRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ExclamationResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExclamationResponse) Reset()         { *m = ExclamationResponse{} }
func (m *ExclamationResponse) String() string { return proto.CompactTextString(m) }
func (*ExclamationResponse) ProtoMessage()    {}
func (*ExclamationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}

func (m *ExclamationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExclamationResponse.Unmarshal(m, b)
}
func (m *ExclamationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExclamationResponse.Marshal(b, m, deterministic)
}
func (m *ExclamationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExclamationResponse.Merge(m, src)
}
func (m *ExclamationResponse) XXX_Size() int {
	return xxx_messageInfo_ExclamationResponse.Size(m)
}
func (m *ExclamationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExclamationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExclamationResponse proto.InternalMessageInfo

func (m *ExclamationResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Foo)(nil), "grpc.Foo")
	proto.RegisterType((*ExclamationRequest)(nil), "grpc.ExclamationRequest")
	proto.RegisterType((*ExclamationResponse)(nil), "grpc.ExclamationResponse")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xc4, 0xb9, 0x98, 0xdd, 0xf2,
	0xf3, 0x85, 0x04, 0xb8, 0x98, 0x93, 0x12, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40,
	0x4c, 0x25, 0x2d, 0x2e, 0x21, 0xd7, 0x8a, 0xe4, 0x9c, 0xc4, 0xdc, 0xc4, 0x92, 0xcc, 0xfc, 0xbc,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54,
	0xa8, 0x4a, 0x08, 0x47, 0x49, 0x9b, 0x4b, 0x18, 0x45, 0x6d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a,
	0x76, 0xc5, 0x46, 0x97, 0x98, 0xb8, 0xf8, 0x5c, 0x2b, 0x92, 0x33, 0x4b, 0x52, 0x53, 0x82, 0x53,
	0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x5c, 0xb8, 0xb8, 0x91, 0xf4, 0x0b, 0x49, 0xe8, 0x81, 0x9d,
	0x89, 0x69, 0xbd, 0x94, 0x24, 0x16, 0x19, 0x88, 0x65, 0x4a, 0x0c, 0x42, 0x41, 0x5c, 0xe2, 0x48,
	0x12, 0xce, 0x39, 0x99, 0xa9, 0x79, 0x25, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x64, 0x9a, 0xa8,
	0xc1, 0x88, 0x66, 0x26, 0xc8, 0xbd, 0xa9, 0x45, 0x14, 0x99, 0x69, 0x00, 0x32, 0x53, 0x14, 0x49,
	0xca, 0x29, 0x33, 0x25, 0x93, 0x42, 0x57, 0x1a, 0x30, 0x3a, 0xc9, 0x73, 0x71, 0x24, 0xe7, 0xe7,
	0x82, 0x55, 0x39, 0x71, 0xba, 0x17, 0x15, 0x24, 0x07, 0x80, 0xe2, 0x38, 0x80, 0x31, 0x8a, 0x0d,
	0x24, 0x54, 0x90, 0x94, 0xc4, 0x06, 0x8e, 0x74, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74,
	0x18, 0x33, 0xad, 0x02, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExcitedServiceClient is the client API for ExcitedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExcitedServiceClient interface {
	// Exclamation adds an exclamation to the request value.
	Exclamation(ctx context.Context, in *ExclamationRequest, opts ...grpc.CallOption) (*ExclamationResponse, error)
	// ExclamationClientStream adds an exclamation to the combined request values.
	ExclamationClientStream(ctx context.Context, opts ...grpc.CallOption) (ExcitedService_ExclamationClientStreamClient, error)
	// ExclamationServerStream adds an exclamation to the request value
	// and streams each character as a response.
	ExclamationServerStream(ctx context.Context, in *ExclamationRequest, opts ...grpc.CallOption) (ExcitedService_ExclamationServerStreamClient, error)
	// ExclamationBidiStream adds an exclamation to the each request value.
	ExclamationBidiStream(ctx context.Context, opts ...grpc.CallOption) (ExcitedService_ExclamationBidiStreamClient, error)
}

type excitedServiceClient struct {
	cc *grpc.ClientConn
}

func NewExcitedServiceClient(cc *grpc.ClientConn) ExcitedServiceClient {
	return &excitedServiceClient{cc}
}

func (c *excitedServiceClient) Exclamation(ctx context.Context, in *ExclamationRequest, opts ...grpc.CallOption) (*ExclamationResponse, error) {
	out := new(ExclamationResponse)
	err := c.cc.Invoke(ctx, "/grpc.ExcitedService/Exclamation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excitedServiceClient) ExclamationClientStream(ctx context.Context, opts ...grpc.CallOption) (ExcitedService_ExclamationClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExcitedService_serviceDesc.Streams[0], "/grpc.ExcitedService/ExclamationClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &excitedServiceExclamationClientStreamClient{stream}
	return x, nil
}

type ExcitedService_ExclamationClientStreamClient interface {
	Send(*ExclamationRequest) error
	CloseAndRecv() (*ExclamationResponse, error)
	grpc.ClientStream
}

type excitedServiceExclamationClientStreamClient struct {
	grpc.ClientStream
}

func (x *excitedServiceExclamationClientStreamClient) Send(m *ExclamationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *excitedServiceExclamationClientStreamClient) CloseAndRecv() (*ExclamationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ExclamationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *excitedServiceClient) ExclamationServerStream(ctx context.Context, in *ExclamationRequest, opts ...grpc.CallOption) (ExcitedService_ExclamationServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExcitedService_serviceDesc.Streams[1], "/grpc.ExcitedService/ExclamationServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &excitedServiceExclamationServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExcitedService_ExclamationServerStreamClient interface {
	Recv() (*ExclamationResponse, error)
	grpc.ClientStream
}

type excitedServiceExclamationServerStreamClient struct {
	grpc.ClientStream
}

func (x *excitedServiceExclamationServerStreamClient) Recv() (*ExclamationResponse, error) {
	m := new(ExclamationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *excitedServiceClient) ExclamationBidiStream(ctx context.Context, opts ...grpc.CallOption) (ExcitedService_ExclamationBidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExcitedService_serviceDesc.Streams[2], "/grpc.ExcitedService/ExclamationBidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &excitedServiceExclamationBidiStreamClient{stream}
	return x, nil
}

type ExcitedService_ExclamationBidiStreamClient interface {
	Send(*ExclamationRequest) error
	Recv() (*ExclamationResponse, error)
	grpc.ClientStream
}

type excitedServiceExclamationBidiStreamClient struct {
	grpc.ClientStream
}

func (x *excitedServiceExclamationBidiStreamClient) Send(m *ExclamationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *excitedServiceExclamationBidiStreamClient) Recv() (*ExclamationResponse, error) {
	m := new(ExclamationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExcitedServiceServer is the server API for ExcitedService service.
type ExcitedServiceServer interface {
	// Exclamation adds an exclamation to the request value.
	Exclamation(context.Context, *ExclamationRequest) (*ExclamationResponse, error)
	// ExclamationClientStream adds an exclamation to the combined request values.
	ExclamationClientStream(ExcitedService_ExclamationClientStreamServer) error
	// ExclamationServerStream adds an exclamation to the request value
	// and streams each character as a response.
	ExclamationServerStream(*ExclamationRequest, ExcitedService_ExclamationServerStreamServer) error
	// ExclamationBidiStream adds an exclamation to the each request value.
	ExclamationBidiStream(ExcitedService_ExclamationBidiStreamServer) error
}

// UnimplementedExcitedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExcitedServiceServer struct {
}

func (*UnimplementedExcitedServiceServer) Exclamation(ctx context.Context, req *ExclamationRequest) (*ExclamationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exclamation not implemented")
}
func (*UnimplementedExcitedServiceServer) ExclamationClientStream(srv ExcitedService_ExclamationClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExclamationClientStream not implemented")
}
func (*UnimplementedExcitedServiceServer) ExclamationServerStream(req *ExclamationRequest, srv ExcitedService_ExclamationServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExclamationServerStream not implemented")
}
func (*UnimplementedExcitedServiceServer) ExclamationBidiStream(srv ExcitedService_ExclamationBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExclamationBidiStream not implemented")
}

func RegisterExcitedServiceServer(s *grpc.Server, srv ExcitedServiceServer) {
	s.RegisterService(&_ExcitedService_serviceDesc, srv)
}

func _ExcitedService_Exclamation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExclamationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcitedServiceServer).Exclamation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExcitedService/Exclamation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcitedServiceServer).Exclamation(ctx, req.(*ExclamationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExcitedService_ExclamationClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExcitedServiceServer).ExclamationClientStream(&excitedServiceExclamationClientStreamServer{stream})
}

type ExcitedService_ExclamationClientStreamServer interface {
	SendAndClose(*ExclamationResponse) error
	Recv() (*ExclamationRequest, error)
	grpc.ServerStream
}

type excitedServiceExclamationClientStreamServer struct {
	grpc.ServerStream
}

func (x *excitedServiceExclamationClientStreamServer) SendAndClose(m *ExclamationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *excitedServiceExclamationClientStreamServer) Recv() (*ExclamationRequest, error) {
	m := new(ExclamationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExcitedService_ExclamationServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExclamationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExcitedServiceServer).ExclamationServerStream(m, &excitedServiceExclamationServerStreamServer{stream})
}

type ExcitedService_ExclamationServerStreamServer interface {
	Send(*ExclamationResponse) error
	grpc.ServerStream
}

type excitedServiceExclamationServerStreamServer struct {
	grpc.ServerStream
}

func (x *excitedServiceExclamationServerStreamServer) Send(m *ExclamationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExcitedService_ExclamationBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExcitedServiceServer).ExclamationBidiStream(&excitedServiceExclamationBidiStreamServer{stream})
}

type ExcitedService_ExclamationBidiStreamServer interface {
	Send(*ExclamationResponse) error
	Recv() (*ExclamationRequest, error)
	grpc.ServerStream
}

type excitedServiceExclamationBidiStreamServer struct {
	grpc.ServerStream
}

func (x *excitedServiceExclamationBidiStreamServer) Send(m *ExclamationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *excitedServiceExclamationBidiStreamServer) Recv() (*ExclamationRequest, error) {
	m := new(ExclamationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExcitedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ExcitedService",
	HandlerType: (*ExcitedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exclamation",
			Handler:    _ExcitedService_Exclamation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExclamationClientStream",
			Handler:       _ExcitedService_ExclamationClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExclamationServerStream",
			Handler:       _ExcitedService_ExclamationServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExclamationBidiStream",
			Handler:       _ExcitedService_ExclamationBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
